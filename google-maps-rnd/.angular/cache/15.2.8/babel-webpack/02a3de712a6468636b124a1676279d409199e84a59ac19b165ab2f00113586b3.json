{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Hashir/Desktop/google-maps/google-maps-rnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport class DisplayMapComponent {\n  constructor() {\n    this.coordinates = [-25.344, 131.031]; //this should come from config file \n  }\n\n  displayMap(coordinates) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (coordinates.length != 0) {\n        _this.coordinates = coordinates;\n      }\n      _this.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 14,\n        center: {\n          lat: _this.coordinates[0],\n          lng: _this.coordinates[1]\n        }\n      });\n      const marker = new google.maps.Marker({\n        map: _this.map,\n        position: {\n          lat: _this.coordinates[0],\n          lng: _this.coordinates[1]\n        },\n        title: 'Uluru'\n      });\n      let lat_rad = coordinates[0] * (Math.PI / 180);\n      let lon_rad = coordinates[1] * (Math.PI / 180);\n      let delta_lat = 5 / 6371000 * (180 / Math.PI);\n      let delta_lon = delta_lat / Math.cos(lat_rad * Math.PI / 180);\n      console.log(delta_lat, delta_lon);\n      let point1_lat = coordinates[0] + delta_lat;\n      let point1_lon = coordinates[1] + delta_lon;\n      let point2_lat = coordinates[0] - delta_lat;\n      let point2_lon = coordinates[1] + delta_lon;\n      let point3_lat = coordinates[0] - delta_lat;\n      let point3_lon = coordinates[1] - delta_lon;\n      let point4_lat = coordinates[0] + delta_lat;\n      let point4_lon = coordinates[1] - delta_lon;\n      const triangleCoords = [{\n        lat: point1_lat,\n        lng: point1_lon\n      }, {\n        lat: point2_lat,\n        lng: point2_lon\n      }, {\n        lat: point3_lat,\n        lng: point3_lon\n      }, {\n        lat: point4_lat,\n        lng: point4_lon\n      }];\n      // Construct the polygon.\n      const bermudaTriangle = new google.maps.Polygon({\n        map: _this.map,\n        paths: triangleCoords,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: \"#FF0000\",\n        fillOpacity: 0.35\n      });\n    })();\n  }\n}\nDisplayMapComponent.ɵfac = function DisplayMapComponent_Factory(t) {\n  return new (t || DisplayMapComponent)();\n};\nDisplayMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DisplayMapComponent,\n  selectors: [[\"app-display-map\"]],\n  decls: 2,\n  vars: 0,\n  consts: [[\"id\", \"map\"], [\"mapElement\", \"\"]],\n  template: function DisplayMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n    }\n  },\n  styles: [\"#map[_ngcontent-%COMP%] {\\r\\n    height: 400px; \\r\\n    width: 100%; \\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9kaXNwbGF5LW1hcC9kaXNwbGF5LW1hcC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYSxFQUFFLDZCQUE2QjtJQUM1QyxXQUFXLEVBQUUsMkNBQTJDO0FBQzVEIiwic291cmNlc0NvbnRlbnQiOlsiI21hcCB7XHJcbiAgICBoZWlnaHQ6IDQwMHB4OyAvKiBUaGUgaGVpZ2h0IGlzIDQwMCBwaXhlbHMgKi9cclxuICAgIHdpZHRoOiAxMDAlOyAvKiBUaGUgd2lkdGggaXMgdGhlIHdpZHRoIG9mIHRoZSB3ZWIgcGFnZSAqL1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["DisplayMapComponent","constructor","displayMap","coordinates","length","map","google","maps","Map","document","getElementById","zoom","center","lat","lng","marker","Marker","position","title","lat_rad","Math","PI","lon_rad","delta_lat","delta_lon","cos","console","log","point1_lat","point1_lon","point2_lat","point2_lon","point3_lat","point3_lon","point4_lat","point4_lon","triangleCoords","bermudaTriangle","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Hashir\\Desktop\\google-maps\\google-maps-rnd\\src\\app\\components\\display-map\\display-map.component.ts","C:\\Users\\Hashir\\Desktop\\google-maps\\google-maps-rnd\\src\\app\\components\\display-map\\display-map.component.html"],"sourcesContent":["\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-display-map',\n  templateUrl: './display-map.component.html',\n  styleUrls: ['./display-map.component.css']\n})\nexport class DisplayMapComponent{\n  \n  map:any;\n  coordinates:number[]=[-25.344,131.031];//this should come from config file \n  async displayMap(coordinates:number[]){\n    \n    if(coordinates.length!=0){\n      this.coordinates=coordinates\n    }\n    this.map = new google.maps.Map(document.getElementById('map') as HTMLElement, {\n      zoom: 14,\n      center: { lat: this.coordinates[0], lng: this.coordinates[1] }\n    });\n    const marker = new google.maps.Marker({\n      map: this.map,\n      position: { lat: this.coordinates[0], lng: this.coordinates[1] },\n      title: 'Uluru'\n    });\n    let lat_rad = coordinates[0] * (Math.PI / 180);\n    let lon_rad = coordinates[1]* (Math.PI / 180);\n\n    let delta_lat = (5 / 6371000) * (180 / Math.PI)\n    let delta_lon = delta_lat / Math.cos(lat_rad * Math.PI / 180)\n    console.log(delta_lat,delta_lon)\n    let point1_lat = coordinates[0] + delta_lat\n    let point1_lon = coordinates[1] + delta_lon\n\n    let point2_lat = coordinates[0] - delta_lat\n    let point2_lon = coordinates[1] + delta_lon\n\n    let point3_lat = coordinates[0] - delta_lat\n    let point3_lon = coordinates[1]- delta_lon\n\n    let point4_lat = coordinates[0] + delta_lat\n    let point4_lon = coordinates[1] - delta_lon\n\n    \n\n    const triangleCoords = [\n      { lat:point1_lat, lng:point1_lon },\n      { lat:point2_lat, lng:point2_lon },\n      { lat:point3_lat, lng:point3_lon },\n      { lat:point4_lat, lng:point4_lon },\n    ];\n  \n    // Construct the polygon.\n    const bermudaTriangle = new google.maps.Polygon({\n      map:this.map,\n      paths: triangleCoords,\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#FF0000\",\n      fillOpacity: 0.35,\n    });\n\n  \n  }\n  \n  \n}\n","<div #mapElement id=\"map\"></div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}